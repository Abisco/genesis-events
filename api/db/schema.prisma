generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup"]
  binaryTargets   = ["native"]
}

datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Provider {
  id        Int      @id @default(autoincrement())
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  uid       String   @unique
  type      String
  user      User?    @relation(fields: [userId], references: [id])
}

model User {
  id                String                  @id @default(uuid())
  firstname         String?
  lastname          String?
  gender            String?
  phone             String?
  city              String?
  state             String?
  country           String?
  zip               String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  howHeard          String?
  flags             Int                     @default(0)
  adminComments     String?
  disabled          Boolean                 @default(false)
  disabledOn        DateTime?
  nickname          String                  @unique
  userPictureId     Int?
  disabledBy        String?
  email             String                  @unique
  dob               String?
  active            Boolean                 @default(true)
  photo             UserPicture?            @relation(fields: [userPictureId], references: [id])
  Contact           Contact[]
  matches           PlayerMatchScore[]
  tournamentsPlayed PlayerTournamentScore[]
  providers         Provider[]
  Store             Store[]
  tournamentsOwned  Tournament[]            @relation("TournamentOwner")
  Tournament        Tournament[]
  UserUserRole      UserUserRole[]
}

model Store {
  id          String       @id @default(uuid())
  name        String
  ownerId     String
  email       String
  phone       String
  lat         Float?
  lng         Float?
  street1     String
  street2     String?
  city        String
  country     String
  state       String
  zip         String
  distributor String
  approved    Boolean?
  approvedOn  DateTime?
  active      Boolean      @default(true)
  owner       User         @relation(fields: [ownerId], references: [id])
  tournaments Tournament[]
}

model UserUserRole {
  id         Int      @id @default(autoincrement())
  userId     String
  userRoleId Int
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userRole   UserRole @relation(fields: [userRoleId], references: [id])

  @@unique([userId, userRoleId], name: "UserUserRole.userId_userRoleId_unique")
}

model UserRole {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  name         String         @unique
  UserUserRole UserUserRole[]
}

model UserPicture {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String
  smallUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User[]
  active    Boolean? @default(true)
}

model Tournament {
  id                     Int                     @id @default(autoincrement())
  name                   String
  tournamentUrl          String                  @unique
  startDate              DateTime
  dateStarted            DateTime?
  dateEnded              DateTime?
  maxPlayers             Int
  locationName           String
  infoUrl                String?
  street1                String?
  street2                String?
  city                   String?
  country                String?
  state                  String?
  zip                    String?
  lat                    Float?
  lng                    Float?
  storeId                String?
  ownerId                String?
  publicRegistration     Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now())
  userId                 String?
  desc                   String?
  active                 Boolean                 @default(true)
  startingTimerInSeconds Int?
  timerLeftInSeconds     Int?
  timerStatus            TimerStatus?
  timerLastUpdated       DateTime?
  owner                  User?                   @relation("TournamentOwner", fields: [ownerId], references: [id])
  store                  Store?                  @relation(fields: [storeId], references: [id])
  user                   User?                   @relation(fields: [userId], references: [id])
  matches                Match[]
  players                PlayerTournamentScore[]
  round                  Round[]
}

model Round {
  id                      Int        @id @default(autoincrement())
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @default(now())
  tournamentId            Int
  roundNumber             Int
  active                  Boolean    @default(true)
  startingTimerInSeconds  Int?
  roundTimerLeftInSeconds Int?
  tournament              Tournament @relation(fields: [tournamentId], references: [id])
  matches                 Match[]
}

model PlayerTournamentScore {
  id            Int        @id @default(autoincrement())
  wins          Int        @default(0)
  losses        Int        @default(0)
  score         Float      @default(0)
  tournamentId  Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  draws         Int        @default(0)
  byes          Int        @default(0)
  randomizer    String?
  active        Boolean    @default(true)
  wonTournament Boolean    @default(false)
  playerName  String?
  playerId      String?
  player        User?       @relation(fields: [playerId], references: [id])
  tournament    Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([playerId, tournamentId], name: "PlayerTournamentScore.playerId_tournamentId_unique")
}

model Match {
  id           Int                @id @default(autoincrement())
  roundId      Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
  tournamentId Int
  active       Boolean            @default(true)
  round        Round              @relation(fields: [roundId], references: [id])
  tournament   Tournament         @relation(fields: [tournamentId], references: [id])
  players      PlayerMatchScore[]
}

model PlayerMatchScore {
  id        Int      @id @default(autoincrement())
  score     Int?
  userId    String
  matchId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  wonMatch  Boolean?  @default(false)
  bye       Boolean  @default(false)
  active    Boolean  @default(true)
  match     Match    @relation(fields: [matchId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, matchId], name: "PlayerMatchScore.userId_matchId_unique")
}

model Contact {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  text        String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  userContact User?    @relation(fields: [userId], references: [id])
}

model Banner {
  id                         Int              @id @default(autoincrement())
  backgroundUrl              String
  mainText                   String?          @default("#8D929E")
  mainTextColor              String?          @default("white")
  mainTextFontSize           Int?             @default(48)
  subText                    String?
  subTextColor               String?
  subTextFontSize            Int?             @default(36)
  textPlacement              Placement?
  button1Link                String?
  button1Text                String?
  button1BackgroundColor     String?          @default("#047857")
  button1TextColor           String?          @default("white")
  button2Link                String?
  button2Text                String?
  button2BackgroundColor     String?          @default("white")
  button2TextColor           String?          @default("#007B54")
  buttonsFontSize            Int?             @default(24)
  buttonsVerticalPlacement   Placement?
  buttonsHorizontalPlacement Placement?
  condition                  BannerCondition?
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @default(now())
  active                     Boolean          @default(true)
}

enum Placement {
  center
  start
  end
}

enum BannerCondition {
  ALL
  GUEST
  LOGGEDIN
  EO
  PLAYER
}

enum TimerStatus {
  PENDING
  INPROGRESS
  PAUSED
  STOPPED
}
