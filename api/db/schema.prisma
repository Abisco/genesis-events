datasource DS {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Provider {
  id        Int      @id @default(autoincrement())
  uid       String   @unique
  type      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id                String                  @id @default(uuid())
  nickname          String                  @unique
  email             String                  @unique
  matches           PlayerMatchScore[]
  tournamentsPlayed PlayerTournamentScore[]
  Tournament        Tournament[] //Not sure why needed
  tournamentsOwned  Tournament[]            @relation(name: "TournamentOwner")
  tournamentsWon    Tournament[]            @relation("TournamentWinner")
  Store             Store[]
  Contact           Contact[]
  firstname         String?
  lastname          String?
  photo             UserPicture?            @relation(fields: [userPictureId], references: [id])
  userPictureId     Int?
  gender            String?
  dob               String?
  phone             String?
  city              String?
  state             String?
  country           String?
  zip               String?
  howHeard          String? //Optional field for Players
  flags             Int                     @default(0)
  adminComments     String?
  disabled          Boolean                 @default(false)
  disabledOn        DateTime?
  disabledBy        String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
  userRoles         UserRole[]
  providers         Provider[]
  //User disabled field
  active            Boolean                 @default(true)
}

model Store {
  id          String       @id @default(uuid())
  name        String
  tournaments Tournament[]
  owner       User         @relation(fields: [ownerId], references: [id])
  ownerId     String
  email       String
  phone       String
  lat         Float?
  lng         Float?
  street1     String
  street2     String?
  city        String
  country     String
  state       String
  zip         String
  distributor String
  approved    Boolean?
  approvedOn  DateTime?
  active      Boolean      @default(true)
}

model UserRole {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserPicture {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String
  user      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Tournament {
  id                Int                     @id @default(autoincrement())
  name              String
  tournamentUrl     String                  @unique //Autogenerate
  startDate         DateTime
  dateStarted       DateTime?
  dateEnded         DateTime?
  maxPlayers        Int
  timeLeftInSeconds Int?
  locationName      String
  infoUrl           String?
  street1           String?
  street2           String?
  city              String?
  country           String?
  state             String?
  zip               String?
  lat               Float?
  lng               Float?
  desc              String?
  round             Round[]
  matches           Match[]
  players           PlayerTournamentScore[]
  winner            User?                   @relation(name: "TournamentWinner", fields: [winnerId], references: [id])
  winnerId          String?
  store             Store?                  @relation(fields: [storeId], references: [id])
  storeId           String?
  owner             User?                   @relation(name: "TournamentOwner", fields: [ownerId], references: [id])
  ownerId           String?
  user              User?                   @relation(fields: [userId], references: [id])
  userId            String?
  active            Boolean                 @default(true)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @default(now())
}

model Round {
  id                    Int          @id @default(autoincrement())
  roundNumber           Int
  matches               Match[]
  tournament            Tournament   @relation(fields: [tournamentId], references: [id])
  startingTimeInSeconds Int?
  timeLeftInSeconds     Int?
  timeStatus            TimerStatus?
  active                Boolean      @default(true)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now())
  tournamentId          Int
}

enum TimerStatus {
  PENDING
  INPROGRESS
  PAUSED
  STOPPED
}

model PlayerTournamentScore {
  id           Int        @id @default(autoincrement())
  wins         Int        @default(0)
  draws        Int        @default(0)
  losses       Int        @default(0)
  score        Int        @default(0)
  byes         Int        @default(0)
  randomizer   String?
  playerId     String
  player       User       @relation(fields: [playerId], references: [id])
  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  active       Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@unique([playerId, tournamentId])
}

model Match {
  id           Int                @id @default(autoincrement())
  players      PlayerMatchScore[]
  round        Round              @relation(fields: [roundId], references: [id])
  roundId      Int
  tournament   Tournament         @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  active       Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now())
}

model PlayerMatchScore {
  id        Int      @id @default(autoincrement())
  score     Int?
  bye       Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   Int
  wonMatch  Boolean  @default(false)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, matchId])
}

model Contact {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  text        String
  userContact User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
